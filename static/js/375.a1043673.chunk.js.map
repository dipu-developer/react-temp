{"version":3,"file":"static/js/375.a1043673.chunk.js","mappings":"gRAgCAA,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IAGF,MA6qBA,EA7qBsBC,KACpB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,IAC3CG,GAAWC,EAAAA,EAAAA,OACX,WAAEC,EAAU,YAAEC,EAAW,YAAEC,GAAgBJ,EAASK,OAAS,CAAC,GAC7DC,EAAgBC,IAAqBV,EAAAA,EAAAA,UAASM,IAE9CK,EAAWC,IAAgBZ,EAAAA,EAAAA,WAAS,IACpCa,EAAOC,IAAYd,EAAAA,EAAAA,UAAS,OAG5Be,EAAQC,IAFFC,KAAKC,MAAMC,eAAeC,QAAQ,iBAEnBpB,EAAAA,EAAAA,UAAS,SAC9BqB,EAAeC,IAAoBtB,EAAAA,EAAAA,UAAS,OAC5CuB,EAAWC,IAAgBxB,EAAAA,EAAAA,UAAS,KACpCyB,EAAmBC,IAAwB1B,EAAAA,EAAAA,UAAS,OACpD2B,EAAcC,IAAmB5B,EAAAA,EAAAA,UAAS,QAE1C6B,EAAYC,IAAiB9B,EAAAA,EAAAA,UAAS,KACtC+B,EAAkBC,IAAuBhC,EAAAA,EAAAA,UAAS,KAClDiC,EAAkBC,IAAuBlC,EAAAA,EAAAA,UAAS,KAClDmC,EAAYC,IAAiBpC,EAAAA,EAAAA,UAAS,KACtCqC,EAAWC,IAAgBtC,EAAAA,EAAAA,UAAS,KACpCuC,EAAWC,IAAgBxC,EAAAA,EAAAA,UAAS,KACpCyC,EAAYC,IAAiB1C,EAAAA,EAAAA,UAAS,KACtC2C,EAAeC,IAAoB5C,EAAAA,EAAAA,UAAS,KAC5C6C,EAAeC,IAAoB9C,EAAAA,EAAAA,UAAS,KAC5C+C,GAAUC,KAAehD,EAAAA,EAAAA,UAAS,KAClCiD,GAAUC,KAAelD,EAAAA,EAAAA,UAAS,KAClCmD,GAAWC,KAAgBpD,EAAAA,EAAAA,UAAS,KACpCqD,GAAiBC,KAAsBtD,EAAAA,EAAAA,UAAS,KAChDuD,GAAcC,KAAmBxD,EAAAA,EAAAA,UAAS,GAsF3CyD,GAAuBC,IAC3B5B,EAAc4B,EAAYC,aAC1B3B,EAAoB4B,WAAWF,EAAYG,mBAAmBC,QAAQ,IACtE5B,EAAoB0B,WAAWF,EAAYK,mBAAmBD,QAAQ,IACtE1B,EAAcsB,EAAYnD,aAC1B+B,EAAaoB,EAAYrD,YACzBmC,EAAakB,EAAYM,YACzBtB,EAAcgB,EAAYpD,aAC1BP,EAAc2D,EAAYO,MAC1BrB,EAAiBc,EAAYQ,UAC7BpB,EAAiBY,EAAYS,SAAS,EAIlCC,GAA8BC,MAAOC,EAAcC,KACvD,IACE,MAAMC,EACJ,mFACIC,QAAiBC,MAAMF,GAC7B,GAAIC,EAASE,GAAI,CACf,MAAMC,QAAaH,EAASI,OAEtBC,EAwKZ,SAAsBC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,KACzCD,EAAMC,GAAID,EAAMG,IAAM,CAACH,EAAMG,GAAIH,EAAMC,GAC1C,CACA,OAAOD,EAAMO,MAAM,EAAG,GACxB,CA9KyBC,CADGtE,KAAKC,MAAMD,KAAKuE,UAAUZ,EAAM,KAAM,KAItDa,EAAYX,EAAWY,KAAKC,GAAU/B,WAAW+B,EAAMC,QACvDC,EAAqBJ,EAAUA,EAAUR,OAAS,GACxD/E,EAAgB2F,GAChB,MAAMC,EAAgBC,GAAYjB,EAAYR,EAAcC,GAC5D/C,EAAa,IACbE,EAAqB,IACrBF,EAAasE,GACbE,GAAoBF,EAAc/E,IAClCW,EAAqBoE,EAAc/E,GACrC,MAEEkF,QAAQC,IAAI,mCAEhB,CAAE,MAAOrF,GACPoF,QAAQpF,MAAM,SAAUA,EAC1B,CAAC,QACCD,GAAa,EACf,GAsCImF,GAAcA,CAACjB,EAAYR,EAAcC,KAE7C,MAAM4B,EAAerB,EAAWY,KAAKU,GAASA,EAAKC,aAC7CC,EAAexB,EAAWY,KAAKU,GAASA,EAAKG,WAC7CC,EAAW1B,EAAWY,KAAKU,GAASA,EAAKR,OAC/CK,QAAQC,IAAI,eAAgB5B,GAC5B2B,QAAQC,IAAI,eAAgB3B,GAE5B,MAAMkC,EAAUC,GAAcP,EAAc,IACtCQ,EAAYD,GAAcJ,EAAc,IACxCM,EAAWF,GAAcF,EAAU,IAEzC,MAAO,CACLK,IAAK,CACHC,OAAQC,GAAe,GAAI,EAAG,GAC9BC,SAAU,CACR,CACEC,MAAO,SACPrC,KAAM6B,EACNS,YAAa,wBACbC,gBAAiB,0BACjBC,YAAa,EACbC,QAAS,GACTC,qBAAsB,SAAUC,GAC9B,MAAMC,EAAQD,EAAQE,IACtB,OAAID,EAAQlD,GAGHkD,EAAQjD,EAFR,MAKF,OACT,EACAmD,YAAa,KAKnBC,MAAO,CACLb,OAAQC,GAAe,GAAI,EAAG,GAC9BC,SAAU,CACR,CACEC,MAAO,SACPrC,KAAM+B,EACNO,YAAa,wBACbC,gBAAiB,0BACjBC,YAAa,EACbC,QAAS,GACTC,qBAAsB,SAAUC,GAC9B,MAAMC,EAAQD,EAAQE,IACtB,OAAID,EAAQlD,GAGHkD,EAAQjD,EAFR,MAKF,OACT,EACAmD,YAAa,KAMnBE,KAAM,CACJd,OAAQC,GAAe,IACvBC,SAAU,CACR,CACEC,MAAO,SACPrC,KAAMgC,EACNM,YAAa,wBACbC,gBAAiB,0BACjBC,YAAa,EACbC,QAAS,GACTC,qBAAsB,SAAUC,GAC9B,MAAMC,EAAQD,EAAQE,IACtB,OAAID,EAAQlD,GAGHkD,EAAQjD,EAFR,MAKF,OACT,EACAmD,YAAa,KAMpB,EAGGhB,GAAgBA,CAAC9B,EAAMiD,KAC3B,MAAMC,EAAiB,GACvB,IAAK,IAAI9C,EAAI,EAAGA,EAAI6C,EAAe,EAAG7C,IAAK,CACzC,MAAM+C,EAAQ/C,EACd8C,EAAeE,KAAKpD,EAAKmD,GAASnE,WAAWgB,EAAKmD,IAAU,EAC9D,CAEA,MAAO,IAAID,EAAe,EAGtBf,GAAiB,SAACkB,GAAgC,IAAzBC,EAAIC,UAAAlD,OAAA,QAAAmD,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAGE,EAAKF,UAAAlD,OAAA,QAAAmD,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC/C,OAAOG,MAAMC,KAAK,CAAEtD,OAAQgD,IAAS,CAACO,EAAGxD,KACtCqD,EAAQrD,EAAIkD,GAAMO,YAEvB,EAWA,MAAMzC,GAAuB0C,IAC3B,MAAMlC,EAAWkC,EAAW1B,SAAS,GAAGpC,KAGlC+D,EAAWxD,KAAKyD,OAAOpC,GACvBqC,EAAW1D,KAAK2D,OAAOtC,GACvBuC,GACJvC,EAASwC,QAAO,CAACC,EAAKrD,IAASqD,EAAMrD,GAAM,GAAKY,EAASvB,QACzDnB,QAAQ,GACiB0C,EAASA,EAASvB,OAAS,GAGtDjC,GAAY+F,GACZ7F,GAAYyF,GACZvF,GAAayF,EAAS,EAIxB,SAASK,GAAkBC,GACzBnI,EAAUmI,GACVvH,EAAgBuH,GAChBnD,GAAoBzE,EAAU4H,IAC9BzH,EAAqBH,EAAU4H,GACjC,EAEAC,EAAAA,EAAAA,YAAU,KApQiB/E,WACzB,MAAMgF,EAAahJ,EAAWiJ,QAAQ,KAAM,KAC5C,IACE,MAAM9E,EACJ,qFACA6E,EAII5E,QAAiBC,MAAMF,EAAK,CAChC+E,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAGpB,GAAI/E,EAASE,GAAI,CACf,MAAMC,QAAaH,EAASI,OAC5BvB,GAAmBsB,GACnB,MAAM6E,EAAgB7E,EAAK8E,MAAKC,GAAUA,EAAOrJ,cAAgBA,IACjE,GAAImJ,EACJ,CACEhG,GAAoBgG,GACpB,MAAMnF,EAAeV,WAAW6F,EAAc1F,mBAAmBD,QAAQ,GACnES,EAAeX,WAAW6F,EAAc5F,mBAAmBC,QAAQ,GACzEM,GAA4BE,EAAcC,EAC5C,CACF,MACE0B,QAAQC,IAAI,mCAEhB,CAAE,MAAOrF,GACPoF,QAAQC,IAAIrF,EAAM+I,QACpB,CAAC,QACChJ,GAAa,EACf,GAoOAiJ,EAAoB,GAEnB,IAEH,MAcMC,GAAU,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAS,EACTC,SAAU,UAEZC,MAAO,CACLF,SAAS,EACTC,SAAU,OACVE,KAAM,GAAG5H,OAWT6H,GAAoBjG,UAExB,GAAG5D,IAAmBgC,EAAW,CAC/B,MAAMgH,EAAgBpG,GAAgBqG,MAAKC,GAAUA,EAAOrJ,cAAgBmC,IAC5E,GAAIgH,EACJ,CACE/H,EAAqB,IACrB,MAAM4C,EAAeV,WAAW6F,EAAc1F,mBAAmBD,QAAQ,GACnES,EAAeX,WAAW6F,EAAc5F,mBAAmBC,QAAQ,QAjOhDO,OAAOC,EAAcC,KAClD,IAyBEH,GAA4BE,EAAcC,EAC5C,CAAE,MAAO1D,GACPoF,QAAQpF,MAAM,SAAUA,EAC1B,CAAC,QACCD,GAAa,EACf,GAmMU2J,CAAuBjG,EAAcC,GAC3Cd,GAAoBgG,GACpB/I,EAAkB+B,EACpB,CACF,GAII+H,GAAmB,CACvB,CAACC,GAAI,IAAKC,WAAYC,EAAmBC,KAAM,mBAC/C,CAACH,GAAI,IAAKC,WAAYG,EAAkBD,KAAM,YAC9C,CAACH,GAAI,IAAKC,WAAYI,EAAWF,KAAM,eACvC,CAACH,GAAI,IAAKC,WAAYK,EAAmBH,KAAM,gBAC/C,CAACH,GAAI,IAAKC,WAAYM,EAAmBJ,KAAM,gBAC/C,CAACH,GAAI,IAAKC,WAAYO,EAAoBL,KAAM,YAChD,CAACH,GAAI,IAAKC,WAAYQ,EAAoBN,KAAM,YAGlD,OACEO,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAClBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,UACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC7BC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,iBAAgBC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kBAAiBC,UAACF,EAAAA,EAAAA,KAAA,KAAGI,KAAK,UAASF,SAAC,cAClDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yBAAwBC,SAAC,yBAG/CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAE5I,YAKtC0I,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAClBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,UACnBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACjBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SACzBhI,GAAgBqC,KAAKU,IAEpB,MAAMoF,EAAiBhB,GAAiBd,MACtCC,GAAUA,EAAOiB,OAASxE,EAAK9F,cAEjC,OAEEgL,EAAAA,EAAAA,MAAA,UACEG,KAAK,SACLL,UAAW,iCACT3K,IAAmB2F,EAAK9F,YAAc,WAAa,YAErDoL,QAASA,IAAMpB,GAAkBlE,EAAK9F,aAAa+K,SAAA,EAGnDF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,UAEzBF,EAAAA,EAAAA,KAAA,OACEQ,IAAKH,EAAiBA,EAAed,WAAac,EAAeI,eACjEC,IAAKzF,EAAK9F,YACV8K,UAAU,YACVU,MAAO,OAGV1F,EAAK9F,cAXD8F,EAAK9F,YAYH,eAmD3BgL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,oBAClCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA2BW,IAAI,MAAKV,UACjDF,EAAAA,EAAAA,KAACa,EAAAA,eAAc,CACbxE,MAAOvH,EACPwL,KAAK,SACL3E,OAAQ,CACNmF,WAAY,CACVC,mBAAmB,EACnBC,gBAAkB3E,GAAU,GAAGA,KAAS1H,KAE1CsM,WAAY,CACVX,KAAM,QACNY,MAAO,CACL,CAAE7E,MAAO,IACT,CAAEA,MAAO,IACT,CAAEA,MAAO,IACT,CAAEA,MAAO,IACT,CAAEA,MAAO,MAEX8E,uBAAwB,CACtBH,gBAAkB3E,GAAU,GAAGA,KAAS1H,OAI9CyM,IAAK,CACHC,WAAY,CAAC,UAAW,WACxBC,QAAS,CAAC,CAAEC,MAAO,IAAM,CAAEA,MAAO,IAAM,CAAC,EAAG,CAAC,EAAG,CAAC,GACjDC,QAAS,IACTb,MAAO,IAETc,QAAS,CACPC,SAAS,EACTC,eAAgB,QAItBxB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wCAAuCC,SAAC,aACrDC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAKpL,EAAa,KAACkL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,2BAA0BC,SAAEvL,WAEjEwL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wCAAuCC,SAAC,aACrDC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAKtI,GAAS,KAACoI,EAAAA,EAAAA,KAAA,QAAMC,UAAU,2BAA0BC,SAAEvL,qBAOrEqL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qCAAoCC,UACjDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,UACEM,KAAK,SACLL,UAAW,gEACQ,QAAjBzJ,EAAyB,qBAAuB,IAElD+J,QAASA,IAAMxC,GAAkB,OAAOmC,SACzC,SAGDF,EAAAA,EAAAA,KAAA,UACEM,KAAK,SACLL,UAAW,gEACQ,UAAjBzJ,EAA2B,qBAAuB,IAEpD+J,QAASA,IAAMxC,GAAkB,SAASmC,SAC3C,WAGDF,EAAAA,EAAAA,KAAA,UACEM,KAAK,SACLL,UAAW,2DACQ,SAAjBzJ,EAA0B,qBAAuB,IAEnD+J,QAASA,IAAMxC,GAAkB,QAAQmC,SAC1C,eAMLF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,oBAElCF,EAAAA,EAAAA,KAAA,OAAKY,IAAI,MAAKV,SACX5J,GACC0J,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CACHnI,KAAMnD,EACNqI,QAASA,GACTkD,OAAQ,OAGV7B,EAAAA,EAAAA,KAAA,KAAAE,SAAG,oCAMbC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAClBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wCAAuCC,SAAC,SACrDC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAKpI,GAAS,KAACkI,EAAAA,EAAAA,KAAA,QAAMC,UAAU,2BAA0BC,SAAEvL,WAE7DwL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wCAAuCC,SAAC,UACrDC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAKlI,GAAU,KAACgI,EAAAA,EAAAA,KAAA,QAAMC,UAAU,2BAA0BC,SAAEvL,WAE9DwL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wCAAuCC,SAAC,mBACrDC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAKpJ,EAAiB,KAACkJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,2BAA0BC,SAAEvL,WAErEwL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wCAAuCC,SAAC,mBACrDC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAKtJ,EAAiB,KAACoJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,2BAA0BC,SAAEvL,kBAK3EqL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,kCAIlCF,EAAAA,EAAAA,KAAA,OAAKV,GAAG,gBAAgBW,UAAU,gBAAeC,UAC/CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBC,UACpCF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,qDAAoDC,UACnEC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,eAClCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,SAAExJ,QAE7ByJ,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,gBAClCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,SAAEhJ,QAE7BiJ,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,iBAClCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,SAAElJ,QAE7BmJ,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,gBAClCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,SAAE9I,QAE7B+I,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,YAClCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,SAAE5I,QAE7B6I,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,cAClCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,SAAE1I,QAE7B2I,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,sBAClCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,SAAExI,iCAY3C,C","sources":["components/pages/Sensordetails.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { GaugeComponent } from \"react-gauge-component\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\nimport highpng from \"../../assets/images/sensor-details/high.png\";\r\nimport lowpng from \"../../assets/images/sensor-details/low.png\";\r\nimport maximum_thresholdpng from \"../../assets/images/sensor-details/maximum_threshold.png\";\r\nimport minimum_thresholdpng from \"../../assets/images/sensor-details/minimum_threshold.png\";\r\nimport averagepng from \"../../assets/images/sensor-details/average.png\";\r\nimport currentpng from \"../../assets/images/sensor-details/current.png\";\r\n\r\nimport airflowSensor1png from '../../assets/images/sensor-icon/airflow-sens1.png';\r\nimport airflowSensor2png from '../../assets/images/sensor-icon/airflow-sens2.png';\r\nimport alphasenseTypeApng from '../../assets/images/sensor-icon/alphasense-a.png';\r\nimport alphasenseTypeBpng from '../../assets/images/sensor-icon/alphasense-b.png';\r\nimport carbonDioxidepng from '../../assets/images/sensor-icon/co2.png';\r\nimport oxygenpng from '../../assets/images/sensor-icon/oxygen.png';\r\nimport iotdevicepng from '../../assets/images/sensor-icon/iot.png';\r\nimport multipledevicepng from '../../assets/images/sensor-icon/multiple_devices.png';\r\n\r\n// Register chart.js modules\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Sensordetails = () => {\r\n  const [sensorUnit, setSensorUnit] = useState(\"\");\r\n  const [currentValue, setCurrentValue] = useState(\"\");\r\n  const location = useLocation();\r\n  const { thing_name, sensor_name, thing_group } = location.state || {};\r\n  const [selectedSensor, setSelectedSensor] = useState(sensor_name);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const user = JSON.parse(sessionStorage.getItem(\"userSession\"));\r\n\r\n  const [filter, setFilter] = useState(\"day\");\r\n  const [selectedPoint, setSelectedPoint] = useState(null);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [chartSelectedData, setChartSelectedData] = useState(null);\r\n  const [activeButton, setActiveButton] = useState(\"day\");\r\n\r\n  const [macAddress, setMacAddress] = useState(\"\");\r\n  const [maximumThreshold, setMaximumThreshold] = useState(\"\");\r\n  const [minimumThreshold, setMinimumThreshold] = useState(\"\");\r\n  const [thingGroup, setThingGroup] = useState(\"\");\r\n  const [thingName, setThingName] = useState(\"\");\r\n  const [thingType, setThingType] = useState(\"\");\r\n  const [sensorName, setSensorName] = useState(\"\");\r\n  const [sensorBatchNo, setSensorBatchNo] = useState(\"\");\r\n  const [sensorMfgDate, setSensorMfgDate] = useState(\"\");\r\n  const [avgValue, setAvgValue] = useState(\"\");\r\n  const [lowValue, setLowValue] = useState(\"\");\r\n  const [highValue, setHighValue] = useState(\"\");\r\n  const [thingSensorData, setThingSensorData] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  // get Thing group wise sensor list\r\n  const handleSensorConfig1 = async () => {\r\n    if (!thing_name || !sensor_name) {\r\n      console.error(\"Invalid thing_name or sensor_name\");\r\n      return;\r\n    }\r\n\r\n    const thingName_ = thing_name.replace(/ /g, \"-\");\r\n    const url = `https://vx69sxxrp0.execute-api.us-east-1.amazonaws.com/Prod/deviceList?thing_name=${thingName_}&sensor_name=${sensor_name}`;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n\r\n        if (data.length === 0) {\r\n          console.error(\"No data received from server\");\r\n          return;\r\n        }\r\n        setMacAddress(data[0]?.mac_address || \"N/A\");\r\n        setMaximumThreshold(data[0]?.maximum_threshold || 0);\r\n        setMinimumThreshold(data[0]?.minimum_threshold || 0);\r\n        setThingGroup(data[0]?.thing_group || \"N/A\");\r\n        setThingName(data[0]?.thing_name || \"N/A\");\r\n        setThingType(data[0]?.thing_type || \"N/A\");\r\n        setSensorName(data[0]?.sensor_name || \"N/A\");\r\n        setSensorUnit(data[0]?.unit || \"N/A\");\r\n        setSensorBatchNo(data[0]?.batch_no || \"N/A\");\r\n        setSensorMfgDate(data[0]?.mfg_date || \"N/A\");\r\n      } else {\r\n        console.log(\r\n          `Failed to get data from server. Status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching data: ${error.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSensorConfig = async () => {\r\n    const thingName_ = thing_name.replace(/ /g, '-');\r\n    try {\r\n      const url =\r\n        'https://vx69sxxrp0.execute-api.us-east-1.amazonaws.com/Prod/deviceList?thing_name=' +\r\n        thingName_;\r\n        /* '&sensor_name=' +\r\n        sensor_name; */\r\n      //Send data to the specified URL\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setThingSensorData(data);\r\n        const matchedSensor = data.find(sensor => sensor.sensor_name === sensor_name);\r\n        if (matchedSensor)\r\n        {\r\n          handleSetSensorData(matchedSensor);\r\n          const minThreshold = parseFloat(matchedSensor.minimum_threshold).toFixed(2);\r\n          const maxThreshold = parseFloat(matchedSensor.maximum_threshold).toFixed(2);\r\n          handleIoTSensorChartDetails(minThreshold, maxThreshold)\r\n        }\r\n      } else {\r\n        console.log('Failed to get data from server..');\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  //Set sensor details\r\n  const handleSetSensorData = (_sensordata) => {\r\n    setMacAddress(_sensordata.mac_address);\r\n    setMaximumThreshold(parseFloat(_sensordata.maximum_threshold).toFixed(2));\r\n    setMinimumThreshold(parseFloat(_sensordata.minimum_threshold).toFixed(2));\r\n    setThingGroup(_sensordata.thing_group);\r\n    setThingName(_sensordata.thing_name);\r\n    setThingType(_sensordata.thing_type);\r\n    setSensorName(_sensordata.sensor_name);\r\n    setSensorUnit(_sensordata.unit);\r\n    setSensorBatchNo(_sensordata.batch_no);\r\n    setSensorMfgDate(_sensordata.mfg_date);\r\n  };\r\n\r\n  \r\n  const handleIoTSensorChartDetails = async (minThreshold, maxThreshold) => {\r\n    try {\r\n      const url =\r\n        \"https://vx69sxxrp0.execute-api.us-east-1.amazonaws.com/Prod/iotDetails?limit=100\";\r\n      const response = await fetch(url);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const responseArray = JSON.parse(JSON.stringify(data, null, 2));\r\n        const dynamoData = shuffleArray(responseArray);\r\n        \r\n        // Extract the temp values as numbers\r\n        const tempsData = dynamoData.map((entry) => parseFloat(entry.temp));\r\n        const currentSensorValue = tempsData[tempsData.length - 1];\r\n        setCurrentValue(currentSensorValue);\r\n        const processedData = processData(dynamoData, minThreshold, maxThreshold);\r\n        setChartData([]);\r\n        setChartSelectedData([]);\r\n        setChartData(processedData);\r\n        sensorLiveAvgMinMax(processedData[filter]);\r\n        setChartSelectedData(processedData[filter]);\r\n      } else {\r\n        //throw new Error('Failed to get data from server..');\r\n        console.log(\"Failed to get data from server..\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch data from API with error handling\r\n  const handleIoTSensorDetails = async (minThreshold, maxThreshold) => {\r\n    try {\r\n      /* const url =\r\n        \"https://vx69sxxrp0.execute-api.us-east-1.amazonaws.com/Prod/iotDetails?limit=100\";\r\n      const response = await fetch(url);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const responseArray = JSON.parse(JSON.stringify(data, null, 2));\r\n        const dynamoData = shuffleArray(responseArray);\r\n        \r\n        console.log('process min ', minimumThreshold);\r\n        console.log('process max ', maximumThreshold);\r\n        // Extract the temp values as numbers\r\n        const tempsData = dynamoData.map((entry) => parseFloat(entry.temp));\r\n        const currentSensorValue = tempsData[tempsData.length - 1];\r\n        setCurrentValue(currentSensorValue);\r\n        const processedData = processData(dynamoData);\r\n        setChartData([]);\r\n        setChartSelectedData([]);\r\n        setChartData(processedData);\r\n        sensorLiveAvgMinMax(processedData[filter]);\r\n        setChartSelectedData(processedData[filter]);\r\n      } else {\r\n        //throw new Error('Failed to get data from server..');\r\n        console.log(\"Failed to get data from server..\");\r\n      } */\r\n      handleIoTSensorChartDetails(minThreshold, maxThreshold);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const processData = (dynamoData, minThreshold, maxThreshold) => {\r\n    // Extract values for dewPointin, humidity, and temp\r\n    const dewPointData = dynamoData.map((item) => item.dewPointin);\r\n    const humidityData = dynamoData.map((item) => item.humidity);\r\n    const tempData = dynamoData.map((item) => item.temp);\r\n    console.log('process min ', minThreshold);\r\n    console.log('process max ', maxThreshold);\r\n    // Normalize data to match the required length\r\n    const dayData = normalizeData(dewPointData, 13);\r\n    const monthData = normalizeData(humidityData, 16);\r\n    const yearData = normalizeData(tempData, 13);\r\n\r\n    return {\r\n      day: {\r\n        labels: generateLabels(12, 2, 2),\r\n        datasets: [\r\n          {\r\n            label: \"Time/H\",\r\n            data: dayData,\r\n            borderColor: \"rgba(75, 192, 192, 1)\",\r\n            backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n            borderWidth: 2,\r\n            tension: 0.4,\r\n            pointBackgroundColor: function (context) {\r\n              const value = context.raw;\r\n              if (value < minThreshold) {\r\n                return \"red\";\r\n              }\r\n              else if (value > maxThreshold) {\r\n                return \"red\";\r\n              }\r\n              return \"green\";\r\n            },\r\n            pointRadius: 4, \r\n          },\r\n        ],\r\n        //data: dayData\r\n      },\r\n      month: {\r\n        labels: generateLabels(15, 2, 2),\r\n        datasets: [\r\n          {\r\n            label: \"Time/D\",\r\n            data: monthData,\r\n            borderColor: \"rgba(75, 192, 192, 1)\",\r\n            backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n            borderWidth: 2,\r\n            tension: 0.4,            \r\n            pointBackgroundColor: function (context) {\r\n              const value = context.raw;\r\n              if (value < minThreshold) {\r\n                return \"red\";\r\n              }\r\n              else if (value > maxThreshold) {\r\n                return \"red\";\r\n              }\r\n              return \"green\";\r\n            },\r\n            pointRadius: 4, \r\n\r\n          },\r\n        ],\r\n        //data: monthData\r\n      },\r\n      year: {\r\n        labels: generateLabels(12),\r\n        datasets: [\r\n          {\r\n            label: \"Time/M\",\r\n            data: yearData,\r\n            borderColor: \"rgba(75, 192, 192, 1)\",\r\n            backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n            borderWidth: 2,\r\n            tension: 0.4,\r\n            pointBackgroundColor: function (context) {\r\n              const value = context.raw;\r\n              if (value < minThreshold) {\r\n                return \"red\";\r\n              }\r\n              else if (value > maxThreshold) {\r\n                return \"red\";\r\n              }\r\n              return \"green\";\r\n            },\r\n            pointRadius: 4, \r\n\r\n          },\r\n        ],\r\n        //data: yearData\r\n      },\r\n    };\r\n  };\r\n\r\n  const normalizeData = (data, targetLength) => {\r\n    const normalizedData = [];\r\n    for (let i = 0; i < targetLength - 1; i++) {\r\n      const index = i;\r\n      normalizedData.push(data[index] ? parseFloat(data[index]) : 0);\r\n    }\r\n    //return [0, ...normalizedData]; // Prepend 0 to the data array\r\n    return [...normalizedData]; // Prepend 0 to the data array\r\n  };\r\n\r\n  const generateLabels = (count, step = 1, start = 1) => {\r\n    return Array.from({ length: count }, (_, i) =>\r\n      (start + i * step).toString()\r\n    );\r\n  };\r\n\r\n  // Fisher-Yates shuffle algorithm\r\n  function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]]; // Swap elements\r\n    }\r\n    return array.slice(0, 16); // Get 10 random array elements\r\n  }\r\n\r\n  const sensorLiveAvgMinMax = (sensorData) => {\r\n    const tempData = sensorData.datasets[0].data;\r\n\r\n    // Calculate min, max, average, and current values\r\n    const minValue = Math.min(...tempData);\r\n    const maxValue = Math.max(...tempData);\r\n    const avgSensorValue = (\r\n      tempData.reduce((sum, temp) => sum + temp, 0) / tempData.length\r\n    ).toFixed(2);\r\n    const currentSensorValue = tempData[tempData.length - 1];\r\n\r\n    //setCurrentValue(currentSensorValue);\r\n    setAvgValue(avgSensorValue);\r\n    setLowValue(minValue);\r\n    setHighValue(maxValue);\r\n  };\r\n\r\n  // Fisher-Yates shuffle algorithm\r\n  function handleChartFilter(filter_by) {\r\n    setFilter(filter_by);\r\n    setActiveButton(filter_by);\r\n    sensorLiveAvgMinMax(chartData[filter_by]);\r\n    setChartSelectedData(chartData[filter_by]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleSensorConfig();\r\n    //handleIoTSensorDetails();\r\n  }, []);\r\n\r\n  const lineChartData = {\r\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\"],\r\n    datasets: [\r\n      {\r\n        label: \"Sensor Data\",\r\n        data: [30, 20, 50, 60, 70],\r\n        borderColor: \"rgba(75, 192, 192, 1)\",\r\n        backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n        borderWidth: 2,\r\n        tension: 0.4, // Smoothness of the line\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n        position: \"bottom\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        position: \"left\",\r\n        text: `${sensorName}`,\r\n      },\r\n    },\r\n    /* scales: {\r\n      y: {\r\n        suggestedMin: 51.3,\r\n        suggestedMax: 53.85,\r\n      },\r\n    }, */\r\n  };\r\n\r\n  const handleSensorClick = async (sensorName) => {\r\n\r\n    if(selectedSensor !== sensorName){\r\n      const matchedSensor = thingSensorData.find(sensor => sensor.sensor_name === sensorName);\r\n      if (matchedSensor)\r\n      {\r\n        setChartSelectedData([]);\r\n        const minThreshold = parseFloat(matchedSensor.minimum_threshold).toFixed(2);\r\n        const maxThreshold = parseFloat(matchedSensor.maximum_threshold).toFixed(2);\r\n        await handleIoTSensorDetails(minThreshold, maxThreshold);\r\n        handleSetSensorData(matchedSensor);\r\n        setSelectedSensor(sensorName);\r\n      }\r\n    }\r\n  };\r\n  \r\n  //Define all sensor properties\r\n  const sensorProperties = [\r\n    {id: '1', sensoricon: multipledevicepng, name: 'Multiple Sensor'},\r\n    {id: '2', sensoricon: carbonDioxidepng, name: 'CO2 Conc'},\r\n    {id: '3', sensoricon: oxygenpng, name: 'Oxygen Conc'},\r\n    {id: '4', sensoricon: airflowSensor1png, name: 'AFM Sensor 1'},\r\n    {id: '5', sensoricon: airflowSensor2png, name: 'AFM Sensor 2'},\r\n    {id: '6', sensoricon: alphasenseTypeApng, name: 'NO2 Conc'},\r\n    {id: '7', sensoricon: alphasenseTypeBpng, name: 'NO Conc'},\r\n  ];\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n              <div className=\"page-title-box\">\r\n                  <div className=\"page-title-right\">\r\n                      <ol className=\"breadcrumb m-0\">\r\n                          <li className=\"breadcrumb-item\"><a href=\"/device\">Device</a></li>\r\n                          <li className=\"breadcrumb-item active\">Sensor Details</li>\r\n                      </ol>\r\n                  </div>\r\n                  <h4 className=\"page-title\">{sensorName}</h4>\r\n              </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n              <div className=\"card\">\r\n                  <div className=\"card-body\">\r\n                    <div className=\"button-list\">\r\n                      {thingSensorData.map((item) => {\r\n                        // Find the corresponding sensor property\r\n                        const sensorProperty = sensorProperties.find(\r\n                          sensor => sensor.name === item.sensor_name\r\n                        );\r\n                        return(\r\n                          // <button type=\"button\" className=\"btn btn-info waves-effect waves-light\" onClick={() => handleSensorClick(item.sensor_name)}>\r\n                          <button\r\n                            type=\"button\"\r\n                            className={`btn waves-effect waves-light ${\r\n                              selectedSensor === item.sensor_name ? \"btn-blue\" : \"btn-info\"\r\n                            }`}\r\n                            onClick={() => handleSensorClick(item.sensor_name)}\r\n                            key={item.sensor_name}\r\n                          >\r\n                            <span className=\"btn-label\">\r\n                              {/* <i className=\"mdi mdi-check-all\"></i> */}\r\n                              <img\r\n                                src={sensorProperty ? sensorProperty.sensoricon : sensorProperty.multipledevice}\r\n                                alt={item.sensor_name} \r\n                                className=\"img-fluid\"\r\n                                width={15}\r\n                              />\r\n                            </span>\r\n                            {item.sensor_name}\r\n                          </button>\r\n                        \r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\n      \r\n      {/* <div className=\"row\">\r\n        <div className=\"col-12\">\r\n            <div className=\"card widget-inline\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6 col-xl-2\">\r\n                          <div className=\"p-2 text-center border\">\r\n                            <img  className=\"pb-1\" width={25} src={lowpng} alt=\"Low\" />\r\n                            <h3><span data-plugin=\"counterup\">{lowValue}</span> {sensorUnit}</h3>\r\n                            <p className=\"text-muted font-15 mb-0\">Low</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-xl-2\">\r\n                          <div className=\"p-2 text-center border\">\r\n                            <img  className=\"pb-1\" width={25} src={highpng} alt=\"High\" />\r\n                            <h3><span data-plugin=\"counterup\">{highValue}</span> {sensorUnit}</h3>\r\n                            <p className=\"text-muted font-15 mb-0\">High</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-xl-2\">\r\n                          <div className=\"p-2 text-center border\">\r\n                            <img  className=\"pb-1\" width={25} src={minimum_thresholdpng} alt=\"Min Threshold\" />\r\n                            <h3><span data-plugin=\"counterup\">{minimumThreshold}</span> {sensorUnit}</h3>\r\n                            <p className=\"text-muted font-15 mb-0\">Min Threshold</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6 col-xl-2\">\r\n                          <div className=\"p-2 text-center border\">\r\n                            <img  className=\"pb-1\" width={25} src={maximum_thresholdpng} alt=\"Max Threshold\" />\r\n                            <h3><span data-plugin=\"counterup\">{maximumThreshold}</span> {sensorUnit}</h3>\r\n                            <p className=\"text-muted font-15 mb-0\">Max Threshold</p>\r\n                          </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      </div>     */}\r\n        \r\n    \r\n        <div className=\"row mb-1 \">\r\n          <div className=\"col-lg-3\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body border \">\r\n                <h4 className=\"header-title mb-2\">Sensor Details</h4>\r\n                <div className=\"widget-chart text-center\" dir=\"ltr\">\r\n                  <GaugeComponent\r\n                    value={currentValue}\r\n                    type=\"radial\"\r\n                    labels={{\r\n                      valueLabel: {\r\n                        matchColorWithArc: true,\r\n                        formatTextValue: (value) => `${value} ${sensorUnit}`,\r\n                      },\r\n                      tickLabels: {\r\n                        type: \"outer\",\r\n                        ticks: [\r\n                          { value: 20 },\r\n                          { value: 40 },\r\n                          { value: 60 },\r\n                          { value: 80 },\r\n                          { value: 100 },\r\n                        ],\r\n                        defaultTickValueConfig: {\r\n                          formatTextValue: (value) => `${value} ${sensorUnit}`,\r\n                        },\r\n                      },\r\n                    }}\r\n                    arc={{\r\n                      colorArray: [\"#5BE12C\", \"#EA4228\"],\r\n                      subArcs: [{ limit: 10 }, { limit: 30 }, {}, {}, {}],\r\n                      padding: 0.02,\r\n                      width: 0.3,\r\n                    }}\r\n                    pointer={{\r\n                      elastic: true,\r\n                      animationDelay: 0,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                  <div className=\"col-6 text-center\">\r\n                    <p className=\"text-muted font-15 mb-1 text-truncate\">Current</p>\r\n                    <h4>{currentValue} <span className=\"text-danger font-size-12\">{sensorUnit}</span></h4>\r\n                  </div>\r\n                  <div className=\"col-6 text-center\">\r\n                    <p className=\"text-muted font-15 mb-1 text-truncate\">Average</p>\r\n                    <h4>{avgValue} <span className=\"text-danger font-size-12\">{sensorUnit}</span></h4>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-lg-5\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body pb-2 border\">\r\n                <div className=\"float-end d-none d-md-inline-block\">\r\n                  <div className=\"btn-group mb-2\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className={`btn-square text-capitalize btn btn-outline-blue btn-sm me-2 ${\r\n                        activeButton === \"day\" ? \"bg-blue text-white\" : \"\"\r\n                      }`}\r\n                      onClick={() => handleChartFilter(\"day\")}\r\n                    >\r\n                      Day\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className={`btn-square text-capitalize btn btn-outline-blue btn-sm me-2 ${\r\n                        activeButton === \"month\" ? \"bg-blue text-white\" : \"\"\r\n                      }`}\r\n                      onClick={() => handleChartFilter(\"month\")}\r\n                    >\r\n                      Month\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className={`btn-square text-capitalize btn btn-outline-blue btn-sm ${\r\n                        activeButton === \"year\" ? \"bg-blue text-white\" : \"\"\r\n                      }`}\r\n                      onClick={() => handleChartFilter(\"year\")}\r\n                    >\r\n                      Year\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <h4 className=\"header-title mb-3\">Sensor Details</h4>\r\n\r\n                <div dir=\"ltr\">\r\n                  {chartSelectedData ? (\r\n                    <Line\r\n                      data={chartSelectedData}\r\n                      options={options}\r\n                      height={175}\r\n                    />\r\n                  ) : (\r\n                    <p>Loading chart data...</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-xl-4\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body border\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-3 text-center\">\r\n                    <p className=\"text-muted font-15 mb-1 text-truncate\">Low</p>\r\n                    <h4>{lowValue} <span className=\"text-danger font-size-12\">{sensorUnit}</span></h4>\r\n                  </div>\r\n                  <div className=\"col-3 text-center\">\r\n                    <p className=\"text-muted font-15 mb-1 text-truncate\">High</p>\r\n                    <h4>{highValue} <span className=\"text-danger font-size-12\">{sensorUnit}</span></h4>\r\n                  </div>\r\n                  <div className=\"col-3 text-center\">\r\n                    <p className=\"text-muted font-15 mb-1 text-truncate\">Min Threshold</p>\r\n                    <h4>{minimumThreshold} <span className=\"text-danger font-size-12\">{sensorUnit}</span></h4>\r\n                  </div>\r\n                  <div className=\"col-3 text-center\">\r\n                    <p className=\"text-muted font-15 mb-1 text-truncate\">Max Threshold</p>\r\n                    <h4>{maximumThreshold} <span className=\"text-danger font-size-12\">{sensorUnit}</span></h4>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"card\">\r\n              <div className=\"card-body border\">\r\n                <div className=\"row mt-2\">\r\n                <h4 className=\"header-title mb-0\">\r\n                  Sensor configuration Details\r\n                </h4>\r\n\r\n                <div id=\"cardCollpase5\" className=\"collapse show\">\r\n                  <div className=\"table-responsive pt-3\">\r\n                    <table className=\"table table-hover table-centered mb-0 config-table\">\r\n                      <tbody>\r\n                        <tr>\r\n                          <td className=\"text-body fw-bold\">Device Id</td>\r\n                          <td className=\"text-blue\">{macAddress}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"text-body fw-bold\">Thing Name</td>\r\n                          <td className=\"text-blue\">{thingName}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"text-body fw-bold\">Thing Group</td>\r\n                          <td className=\"text-blue\">{thingGroup}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"text-body fw-bold\">Thing Type</td>\r\n                          <td className=\"text-blue\">{thingType}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"text-body fw-bold\">Sensor</td>\r\n                          <td className=\"text-blue\">{sensorName}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"text-body fw-bold\">Batch No</td>\r\n                          <td className=\"text-blue\">{sensorBatchNo}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"text-body fw-bold\">Manufacture Date</td>\r\n                          <td className=\"text-blue\">{sensorMfgDate}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sensordetails;\r\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Sensordetails","sensorUnit","setSensorUnit","useState","currentValue","setCurrentValue","location","useLocation","thing_name","sensor_name","thing_group","state","selectedSensor","setSelectedSensor","isLoading","setIsLoading","error","setError","filter","setFilter","JSON","parse","sessionStorage","getItem","selectedPoint","setSelectedPoint","chartData","setChartData","chartSelectedData","setChartSelectedData","activeButton","setActiveButton","macAddress","setMacAddress","maximumThreshold","setMaximumThreshold","minimumThreshold","setMinimumThreshold","thingGroup","setThingGroup","thingName","setThingName","thingType","setThingType","sensorName","setSensorName","sensorBatchNo","setSensorBatchNo","sensorMfgDate","setSensorMfgDate","avgValue","setAvgValue","lowValue","setLowValue","highValue","setHighValue","thingSensorData","setThingSensorData","currentIndex","setCurrentIndex","handleSetSensorData","_sensordata","mac_address","parseFloat","maximum_threshold","toFixed","minimum_threshold","thing_type","unit","batch_no","mfg_date","handleIoTSensorChartDetails","async","minThreshold","maxThreshold","url","response","fetch","ok","data","json","dynamoData","array","i","length","j","Math","floor","random","slice","shuffleArray","stringify","tempsData","map","entry","temp","currentSensorValue","processedData","processData","sensorLiveAvgMinMax","console","log","dewPointData","item","dewPointin","humidityData","humidity","tempData","dayData","normalizeData","monthData","yearData","day","labels","generateLabels","datasets","label","borderColor","backgroundColor","borderWidth","tension","pointBackgroundColor","context","value","raw","pointRadius","month","year","targetLength","normalizedData","index","push","count","step","arguments","undefined","start","Array","from","_","toString","sensorData","minValue","min","maxValue","max","avgSensorValue","reduce","sum","handleChartFilter","filter_by","useEffect","thingName_","replace","method","headers","matchedSensor","find","sensor","message","handleSensorConfig","options","responsive","plugins","legend","display","position","title","text","handleSensorClick","handleIoTSensorDetails","sensorProperties","id","sensoricon","multipledevicepng","name","carbonDioxidepng","oxygenpng","airflowSensor1png","airflowSensor2png","alphasenseTypeApng","alphasenseTypeBpng","_jsx","className","children","_jsxs","href","sensorProperty","type","onClick","src","multipledevice","alt","width","dir","GaugeComponent","valueLabel","matchColorWithArc","formatTextValue","tickLabels","ticks","defaultTickValueConfig","arc","colorArray","subArcs","limit","padding","pointer","elastic","animationDelay","Line","height"],"sourceRoot":""}