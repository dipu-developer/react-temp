{"version":3,"file":"static/js/438.f5a6abbc.chunk.js","mappings":"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","sources":["components/pages/Device.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\n\r\nimport airflowSensor1 from '../../assets/images/sensor-icon/airflow-sens1.png';\r\nimport airflowSensor2 from '../../assets/images/sensor-icon/airflow-sens2.png';\r\nimport alphasenseTypeA from '../../assets/images/sensor-icon/alphasense-a.png';\r\nimport alphasenseTypeB from '../../assets/images/sensor-icon/alphasense-b.png';\r\nimport carbonDioxide from '../../assets/images/sensor-icon/co2.png';\r\nimport oxygen from '../../assets/images/sensor-icon/oxygen.png';\r\nimport iotdevice from '../../assets/images/sensor-icon/iot.png';\r\nimport multipledevice from '../../assets/images/sensor-icon/multiple_devices.png';\r\n\r\nconst Device = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const [devicesList, setDevicesList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const user = JSON.parse(sessionStorage.getItem('userSession'));\r\n  const [isMultiTarget, setIsMultiTarget] = useState([]);\r\n\r\n  const targetHandler = (target) => {\r\n    if (isMultiTarget.findIndex((item) => item === target) > -1) {\r\n      setIsMultiTarget((prevState) => {\r\n        return prevState.filter((item) => item !== target);\r\n      });\r\n    } else {\r\n      setIsMultiTarget((prevState) => {\r\n        return [...prevState, target];\r\n      });\r\n    }\r\n  };\r\n\r\n  \r\n  //Define all sensor properties\r\n  const sensorProperties = [\r\n    {id: '1', sensoricon: iotdevice, name: 'Multiple Sensor'},\r\n    {id: '2', sensoricon: carbonDioxide, name: 'CO2 Conc'},\r\n    {id: '3', sensoricon: oxygen, name: 'Oxygen Conc'},\r\n    {id: '4', sensoricon: airflowSensor1, name: 'AFM Sensor 1'},\r\n    {id: '5', sensoricon: airflowSensor2, name: 'AFM Sensor 2'},\r\n    {id: '6', sensoricon: alphasenseTypeA, name: 'NO2 Conc'},\r\n    {id: '7', sensoricon: alphasenseTypeB, name: 'NO Conc'},\r\n  ];\r\n\r\n  // Function to get Thing group wise sensor list\r\n  const handleLoadDeviceList = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      let company_name = user.custom_cname;\r\n      company_name = company_name.toUpperCase();\r\n      console.log(company_name);\r\n      const url = 'https://vx69sxxrp0.execute-api.us-east-1.amazonaws.com/Prod/deviceList?company_name=' + encodeURIComponent(company_name);\r\n      const response = await fetch(url);\r\n     \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setDevicesList(data);\r\n      } else {\r\n        console.log('Failed to fetch data from the server');\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n      console.log(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get device list with sensors on component mount\r\n  useEffect(() => {\r\n    handleLoadDeviceList();\r\n  }, []);\r\n\r\n  \r\n  const multipleSensorRenderItem1 = ({ item, thingGroup }) => {\r\n    // Find the corresponding sensor property\r\n    const sensorProperty = sensorProperties.find(\r\n      sensor => sensor.name === item.sensor_name\r\n    );\r\n\r\n    const handleNavigation = () => {\r\n      navigate('/sensor-details', {\r\n        state: {\r\n          thing_name: item.thing_name.replace(/-/g, ' '),\r\n          sensor_name: item.sensor_name,\r\n          thing_group: thingGroup,\r\n        },\r\n\r\n      });\r\n    };\r\n\r\n    return(\r\n      <div className=\"d-flex align-items-start mb-3\" key={item.sensor_id} onClick={handleNavigation}>\r\n        <img className=\"me-3 rounded-circle\" src={sensorProperty ? sensorProperty.sensoricon : sensorProperty.multipledevice} alt={item.sensor_name} width=\"40\" />\r\n        <div className=\"w-100\">\r\n          <span className=\"badge badge-soft-warning float-end mt-2 \"style={{ fontSize: '16px' }}>24.5 {item.unit}</span>\r\n          <h4 className=\"mt-2 mb-1\">{item.sensor_name}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  \r\n  const multipleSensorRenderItem = ({ item, thingGroup }) => {\r\n    // Find the corresponding sensor property\r\n    const sensorProperty = sensorProperties.find(\r\n      sensor => sensor.name === item.sensor_name\r\n    );\r\n\r\n    const handleNavigation = () => {\r\n      navigate('/sensor-details', {\r\n        state: {\r\n          thing_name: item.thing_name.replace(/-/g, ' '),\r\n          sensor_name: item.sensor_name,\r\n          thing_group: thingGroup,\r\n        },\r\n\r\n      });\r\n    };\r\n\r\n    /* return(\r\n      <div className=\"d-flex align-items-start\" key={item.sensor_id} onClick={handleNavigation}>\r\n        <img className=\"me-3 rounded-circle\" src={sensorProperty ? sensorProperty.sensoricon : sensorProperty.multipledevice} alt={item.sensor_name} width=\"20\" />\r\n        <div className=\"w-100\">\r\n          <span className=\"badge badge-soft-warning float-end mt-2 \"style={{ fontSize: '16px' }}>{item.unit}</span><span className=\"badge badge-soft-info float-end mt-2 \"style={{ fontSize: '16px' }}>22.65</span>\r\n          <h4 className=\"mt-2 mb-1\">{item.sensor_name}</h4>\r\n        </div>\r\n      </div>\r\n    ); */\r\n    \r\n    return(\r\n      <tr key={item.sensor_id} onClick={handleNavigation}>\r\n        <td>\r\n          <img className=\"rounded-circle bx-shadow-lg\" src={sensorProperty ? sensorProperty.sensoricon : sensorProperty.multipledevice} alt={item.sensor_name} width=\"25\" />\r\n          <span class=\"ms-2\">{item.sensor_name}</span>\r\n        </td>\r\n        <td>\r\n          <span className=\"badge badge-soft-info\">22.65</span>\r\n          <span className=\"badge badge-soft-warning\">{item.unit}</span>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"page-title-box\">\r\n              <div className=\"page-title-right\">\r\n                <ol className=\"breadcrumb m-0\">\r\n                  {/* <li className=\"breadcrumb-item\">\r\n                    <a href=\"#\">UBold</a>\r\n                  </li> */}\r\n                  <li className=\"breadcrumb-item active\">Device</li>\r\n                </ol>\r\n              </div>\r\n              <h4 className=\"page-title\">Devices</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {isLoading && <p>Loading...</p>}\r\n        {error && <p className=\"error\">{error}</p>}\r\n        \r\n        {devicesList && Object.keys(devicesList).length > 0 ? (\r\n          <div className=\"row\">\r\n          {Object.entries(devicesList).map(([key, devices]) => (\r\n            <div className=\"col-lg-12\" key={key}>\r\n              <div className=\"card border\">\r\n                <div className=\"card-header bg-blue py-3 text-white\">\r\n                  <div className=\"card-widgets\">\r\n                      Total Devices: {devices.length}\r\n                  </div>\r\n                  <h4 className=\"card-title mb-0 text-white\">{key}</h4>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <div className=\"row\">\r\n                    {devices.map((device) => (\r\n                      <div className=\"col-3\">\r\n                        <div className=\"card border border-success\">\r\n                          <div className=\"card-body\">\r\n                            <div className=\"d-flex align-items-start collapsed\" id={\"heading_\" + device.device_id} data-bs-toggle=\"collapse\" href={\"#collapse_\" + device.device_id} aria-expanded=\"false\" aria-controls={\"collapse_\" + device.device_id}>\r\n                              <img className=\"me-3 rounded-circle\" src={multipledevice} alt=\"Multiple Devices\" width=\"40\" />\r\n                              <div className=\"w-100\">\r\n                                  <h4 className=\"mt-0 mb-1\">{device.thing_name}</h4>\r\n                                  <span className=\"font-13\">Multiple Devices</span>\r\n                              </div>\r\n                            </div>\r\n                            {device.sensorList && device.sensorList.length > 0 && (\r\n                              <div id={\"collapse_\" + device.device_id} className=\"collapse\" aria-labelledby={\"heading_\" + device.device_id} data-bs-parent=\"#custom-accordion-one\">\r\n                                <div className=\"card-body\">\r\n                                  <table class=\"table table-centered table-nowrap table-hover mb-0\">\r\n                                    <tbody>\r\n                                      {device.sensorList.map((sensor) => \r\n                                        multipleSensorRenderItem({item: sensor, thingGroup:key })\r\n                                      )}\r\n                                    </tbody>\r\n                                  </table>\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  \r\n                 {/*  <div className=\"row\">\r\n                    <div className=\"col-lg-12\">\r\n                      {devices.map((device) => (\r\n                        <div className=\"mb-3\">\r\n                          {device.sensorList && device.sensorList.length > 0 && (\r\n                            <div id={\"collapse_\" + device.device_id} className=\"collapse\" aria-labelledby={\"heading_\" + device.device_id} data-bs-parent=\"#custom-accordion-one\">\r\n                              <div className=\"card-body\">\r\n                                {device.sensorList.map((sensor) => \r\n                                    multipleSensorRenderItem({item: sensor, thingGroup:key })\r\n                                  )}\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          </div>\r\n        ) : (\r\n          <h2>No sensors available</h2>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Device;\r\n"],"names":["Device","navigate","useNavigate","devicesList","setDevicesList","useState","isLoading","setIsLoading","error","setError","user","JSON","parse","sessionStorage","getItem","isMultiTarget","setIsMultiTarget","sensorProperties","id","sensoricon","iotdevice","name","carbonDioxide","oxygen","airflowSensor1","airflowSensor2","alphasenseTypeA","alphasenseTypeB","useEffect","async","company_name","custom_cname","toUpperCase","console","log","url","encodeURIComponent","response","fetch","ok","data","json","message","handleLoadDeviceList","_jsx","className","children","_jsxs","Object","keys","length","entries","map","_ref3","key","devices","device","device_id","href","src","multipledevice","alt","width","thing_name","sensorList","class","sensor","_ref2","item","thingGroup","sensorProperty","find","sensor_name","onClick","handleNavigation","state","replace","thing_group","unit","sensor_id","multipleSensorRenderItem"],"sourceRoot":""}